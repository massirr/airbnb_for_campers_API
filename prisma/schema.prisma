generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model campingSpot_bookings {
  spotID      Int
  bookingID   Int
  booking     bookings     @relation(fields: [bookingID], references: [bookingID], onDelete: NoAction, onUpdate: NoAction, map: "fk_campingSpot_bookings_bookingID")
  campingSpot campingSpots @relation(fields: [spotID], references: [spotID], onDelete: NoAction, onUpdate: NoAction, map: "fk_campingSpot_bookings_spotID")

  @@id([spotID, bookingID])
  @@index([bookingID], map: "fk_campingSpot_bookings_bookingID_idx")
  @@index([spotID], map: "fk_campingSpot_bookings_spotID_idx")
}

model campingSpot_features {
  spotID      Int
  featureID   Int
  feature     features     @relation(fields: [featureID], references: [featureID], onDelete: NoAction, onUpdate: NoAction, map: "fk_campingSpot_features_featrureID")
  campingSpot campingSpots @relation(fields: [spotID], references: [spotID], onDelete: NoAction, onUpdate: NoAction, map: "fk_campingSpot_features_spotID")

  @@id([spotID, featureID])
  @@index([featureID], map: "fk_campingSpot_features_featrureID_idx")
  @@index([spotID], map: "fk_campingSpot_features_spotID_idx")
}

model bookings {
  bookingID            Int                    @id @unique(map: "bookingID_UNIQUE") @default(1)
  userID               Int
  startDate            DateTime               @db.DateTime(0)
  endDate              DateTime               @db.DateTime(0)
  price                Int
  users                users                  @relation(fields: [userID], references: [userID], onDelete: NoAction, onUpdate: NoAction, map: "fk_booking_userID")
  campingSpot_bookings campingSpot_bookings[]
  reviews              reviews[]

  @@index([userID], map: "fk_booking_userID_idx")
}

model campingSpots {
  spotID               Int                    @id @unique(map: "spotID_UNIQUE")
  userID               Int
  name                 String                 @db.VarChar(45)
  description          String                 @db.VarChar(45)
  price                Int
  country              String                 @db.VarChar(45)
  city                 String                 @db.VarChar(45)
  latitude             Decimal                @db.Decimal(10, 10)
  longitude            Decimal                @db.Decimal(10, 10)
  bookable             String                 @default("true") @db.VarChar(45)
  campingSpot_bookings campingSpot_bookings[]
  campingSpot_features campingSpot_features[]
  users                users                  @relation(fields: [userID], references: [userID], onDelete: NoAction, onUpdate: NoAction, map: "fk_campingSpot_userID")
  reviews              reviews[]

  @@index([userID], map: "fk_campingSpot_userID_idx")
}

model features {
  featureID            Int                    @id @unique(map: "featureID_UNIQUE")
  featureName          String                 @db.VarChar(45)
  campingSpot_features campingSpot_features[]
}

model reviews {
  reviewID     Int          @id @unique(map: "reviewID_UNIQUE")
  bookingID    Int
  spotID       Int
  rating       Int?
  comment      String?      @db.VarChar(45)
  bookings     bookings     @relation(fields: [bookingID], references: [bookingID], onDelete: NoAction, onUpdate: NoAction, map: "fk_review_bookingID")
  campingSpots campingSpots @relation(fields: [spotID], references: [spotID], onDelete: NoAction, onUpdate: NoAction, map: "fk_review_spotID")

  @@index([bookingID], map: "fk_review_bookingID_idx")
  @@index([spotID], map: "fk_review_spotID_idx")
}

model users {
  userID       Int            @id
  username     String         @db.VarChar(16)
  email        String         @db.VarChar(255)
  password     String         @db.VarChar(32)
  createDate   DateTime       @db.DateTime(0)
  isAdmin      String         @db.VarChar(45)
  bookings     bookings[]
  campingSpots campingSpots[]
}
